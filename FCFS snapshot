To schedule snapshot of processes queued according to FCFS scheduling.
#include <stdio.h>

struct process {
    int pid; 
    int arrival_time; 
    int burst_time;
    int start_time; 
    int completion_time; 
};

int main() {
    int n; 
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process p[n];
    int total_waiting_time = 0;

   
    for (int i = 0; i < n; i++) {
        printf("Enter the arrival time and burst time of process %d: ", i+1);
        scanf("%d %d", &p[i].arrival_time, &p[i].burst_time);
        p[i].pid = i+1;
    }

   
    for (int i = 0; i < n; i++) {
        for (int j = i+1; j < n; j++) {
            if (p[i].arrival_time > p[j].arrival_time) {
                struct process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }


    for (int i = 0; i < n; i++) {
        if (i == 0) {
            p[i].start_time = p[i].arrival_time;
        } else {
            p[i].start_time = p[i-1].completion_time;
        }
        p[i].completion_time = p[i].start_time + p[i].burst_time;
        total_waiting_time += p[i].start_time - p[i].arrival_time;
    }

 
    printf("\nPID\tArrival Time\tBurst Time\tStart Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].start_time, p[i].completion_time);
    }
    printf("\nAverage waiting time: %.2f\n", (float)total_waiting_time/n);

    return 0;
}
